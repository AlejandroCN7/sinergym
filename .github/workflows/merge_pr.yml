name: "PR merge workflow"
on:
  push:
    branches:
      - main

jobs:

  apply-autopep8:
    name: Autopep8 auto-format by a bot
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Apply isort
        id: isort-step
        # default configuration use --check-only and --diff instead of --in-place options.
        uses: isort/isort-action@master
        with:
          configuration: --only-modified

      - name: autopep8 check and fix
        id: autopep8
        uses: peter-evans/autopep8@v1
        with:
          args: --exit-code --recursive --in-place --aggressive --aggressive .
        
      - name: Detect changes by isort
        uses: tj-actions/verify-changed-files@v7.2
        id: verify-isort-update
        with:
          files: |
            tests/
            sinergym/
            examples/
            *.py

      - name: Commit format changes
        if: steps.autopep8.outputs.exit-code == 2 || steps.verify-isort-update.outputs.files_changed == 'true'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Automated format fixes (autopep8 + isort)

  apply-documentation:
    name: Documentation compilation update by bot
    needs: [apply-autopep8]
    runs-on: ubuntu-latest    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
      - name: Verify documentation update
        uses: dorny/paths-filter@v2
        id: verify-documentation-update
        with:
          filters: |
            doc:
              - 'docs/source/**'
      - name: Upgrade pip
        if: steps.verify-documentation-update.outputs.doc == 'true'
        run: "python -m pip install --upgrade pip"
      - name: Install dependencies [sinergym extras]
        if: steps.verify-documentation-update.outputs.doc == 'true'
        run: "pip install -e .[extras]"
      - name: Compile documentation
        if: steps.verify-documentation-update.outputs.doc == 'true'
        run: "cd docs && sphinx-build -M html source build -W"
      - name: Check sphinx spelling
        if: steps.verify-documentation-update.outputs.doc == 'true'
        run: "cd docs && sphinx-build -M spelling source build -W"
      # - name: Commit and push changes if exists
      #   if: steps.verify-documentation-update.outputs.doc == 'true'
        # uses: stefanzweifel/git-auto-commit-action@v4
        # with:
        #   branch: gh-pages
        #   file_pattern: docs/build/*
        #   commit_message: Documentation source update detected and pushed compilation build directory for Github Pages

      # Clone and set up the old gh-pages branch
      - name: Clone old gh-pages
        if: steps.verify-documentation-update.outputs.doc == 'true'
        run: |
          set -x
          git fetch
          ( git branch gh-pages remotes/origin/gh-pages && git clone . --branch=gh-pages _gh-pages/ ) || mkdir _gh-pages
          rm -rf _gh-pages/.git/
          mkdir -p _gh-pages/branch/
      # If a push and default branch, copy build to _gh-pages/ as the "main"
      # deployment.
      - name: Copy new build (default branch)
        if: |
          contains(github.event_name, 'push') &&
          contains(github.ref, env.DEFAULT_BRANCH) &&
          steps.verify-documentation-update.outputs.doc == 'true'
        run: |
          set -x
          # Delete everything under _gh-pages/ that is from the
          # primary branch deployment.  Eicludes the other branches
          # _gh-pages/branch-* paths, and not including
          # _gh-pages itself.
          find _gh-pages/ -mindepth 1 ! -path '_gh-pages/branch*' -delete
          rsync -a _build/dirhtml/ _gh-pages/
      # If a push and not on default branch, then copy the build to
      # _gh-pages/branch/$brname (transforming '/' into '--')
      - name: Copy new build (branch)
        if: |
          contains(github.event_name, 'push') &&
          !contains(github.ref, env.DEFAULT_BRANCH) &&
          steps.verify-documentation-update.outputs.doc == 'true'
        run: |
          set -x
          #brname=$(git rev-parse --abbrev-ref HEAD)
          brname="${{github.ref}}"
          brname="${brname##refs/heads/}"
          brdir=${brname//\//--}   # replace '/' with '--'
          rm -rf   _gh-pages/branch/${brdir}
          rsync -a _build/dirhtml/ _gh-pages/branch/${brdir}
      # Go through each branch in _gh-pages/branch/, if it's not a
      # ref, then delete it.
      - name: Delete old feature branches
        if: steps.verify-documentation-update.outputs.doc == 'true'
        run: |
          set -x
          for brdir in `ls _gh-pages/branch/` ; do
              brname=${brdir//--/\/}   # replace '--' with '/'
              if ! git show-ref remotes/origin/$brname ; then
                  echo "Removing $brdir"
                  rm -r _gh-pages/branch/$brdir/
              fi
          done
      # Add the .nojekyll file
      - name: nojekyll
        if: steps.verify-documentation-update.outputs.doc == 'true'
        run: |
          touch _gh-pages/.nojekyll
      # Deploy
      # https://github.com/peaceiris/actions-gh-pages
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        if: steps.verify-documentation-update.outputs.doc == 'true'
        #if: ${{ success() && github.event_name == 'push' && github.ref == 'refs/heads/$defaultBranch' }}
        with:
          publish_branch: gh-pages
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: _gh-pages/
          force_orphan: true  
    
  update-dockerhub:
    needs: [apply-autopep8, apply-documentation]
    env:
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    # If you don't have secrets configured with docker credential, this job will be skipped
    name: Container build and upload in Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        if: "${{ env.DOCKER_USER != '' && env.DOCKER_PASSWORD != '' }}"
        uses: actions/checkout@v2
      - name: Build the latest Docker image
        if: "${{ env.DOCKER_USER != '' && env.DOCKER_PASSWORD != '' }}"
        run: docker build . --file Dockerfile --build-arg SINERGYM_EXTRAS=[extras] --tag $DOCKER_USER/sinergym:latest
      - name: Login in Docker Hub account
        if: "${{ env.DOCKER_USER != '' && env.DOCKER_PASSWORD != '' }}"
        run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - name: Push container used with test
        if: "${{ env.DOCKER_USER != '' && env.DOCKER_PASSWORD != '' }}"
        run: docker push $DOCKER_USER/sinergym:latest
